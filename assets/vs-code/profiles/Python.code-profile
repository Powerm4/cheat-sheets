{"name":"Python","settings":"{\"settings\":\"{\\r\\n  \\\"python.analysis.autoImportCompletions\\\": true,\\r\\n  \\\"python.analysis.fixAll\\\": [\\\"source.unusedImports\\\"],\\r\\n  \\\"editor.defaultFormatter\\\": \\\"ms-python.black-formatter\\\",\\r\\n  \\\"files.exclude\\\": {\\r\\n    \\\"**/__pycache__\\\": true,\\r\\n    \\\"**/.cache\\\": true,\\r\\n    \\\"**/.coverage\\\": true,\\r\\n    \\\"**/.coverage.*\\\": true,\\r\\n    \\\"**/.hypothesis\\\": true,\\r\\n    \\\"**/.mypy_cache\\\": true,\\r\\n    \\\"**/.nox\\\": true,\\r\\n    \\\"**/.pytest_cache\\\": true,\\r\\n    \\\"**/.ruff_cache\\\": true,\\r\\n    \\\"**/.tox\\\": true\\r\\n  },\\r\\n  \\\"editor.fontFamily\\\": \\\"JetBrains Mono\\\",\\r\\n  \\\"editor.fontLigatures\\\": true,\\r\\n  \\\"editor.cursorSmoothCaretAnimation\\\": \\\"on\\\",\\r\\n  \\\"editor.fontWeight\\\": \\\"normal\\\",\\r\\n  \\\"terminal.external.linuxExec\\\": \\\"iterm\\\",\\r\\n  \\\"editor.wordWrap\\\": \\\"on\\\",\\r\\n  \\\"editor.linkedEditing\\\": true,\\r\\n  \\\"terminal.integrated.fontFamily\\\": \\\"JetBrainsMonoNL Nerd Font Mono\\\",\\r\\n  \\\"terminal.integrated.fontSize\\\": 16,\\r\\n  \\\"editor.cursorBlinking\\\": \\\"smooth\\\",\\r\\n  \\\"editor.cursorStyle\\\": \\\"block-outline\\\",\\r\\n  \\\"editor.bracketPairColorization.enabled\\\": true,\\r\\n  \\\"editor.guides.bracketPairs\\\": true,\\r\\n  \\\"security.workspace.trust.untrustedFiles\\\": \\\"open\\\",\\r\\n  \\\"editor.tabSize\\\": 2,\\r\\n  \\\"window.commandCenter\\\": true,\\r\\n  \\\"editor.formatOnSave\\\": true\\r\\n}\\r\\n\"}","snippets":"{\"snippets\":{\"python.json\":\"\\n{\\n    \\\"if\\\": {\\n        \\\"prefix\\\": \\\"if\\\",\\n        \\\"body\\\": [\\\"if ${1:expression}:\\\", \\\"\\\\t${2:pass}\\\"],\\n        \\\"description\\\": \\\"Code snippet for an if statement\\\"\\n    },\\n    \\\"if/else\\\": {\\n        \\\"prefix\\\": \\\"if/else\\\",\\n        \\\"body\\\": [\\\"if ${1:condition}:\\\", \\\"\\\\t${2:pass}\\\", \\\"else:\\\", \\\"\\\\t${3:pass}\\\"],\\n        \\\"description\\\": \\\"Code snippet for an if statement with else\\\"\\n    },\\n    \\\"elif\\\": {\\n        \\\"prefix\\\": \\\"elif\\\",\\n        \\\"body\\\": [\\\"elif ${1:expression}:\\\", \\\"\\\\t${2:pass}\\\"],\\n        \\\"description\\\": \\\"Code snippet for an elif\\\"\\n    },\\n    \\\"else\\\": {\\n        \\\"prefix\\\": \\\"else\\\",\\n        \\\"body\\\": [\\\"else:\\\", \\\"\\\\t${1:pass}\\\"],\\n        \\\"description\\\": \\\"Code snippet for an else\\\"\\n    },\\n    \\\"while\\\": {\\n        \\\"prefix\\\": \\\"while\\\",\\n        \\\"body\\\": [\\\"while ${1:expression}:\\\", \\\"\\\\t${2:pass}\\\"],\\n        \\\"description\\\": \\\"Code snippet for a while loop\\\"\\n    },\\n    \\\"while/else\\\": {\\n        \\\"prefix\\\": \\\"while/else\\\",\\n        \\\"body\\\": [\\\"while ${1:expression}:\\\", \\\"\\\\t${2:pass}\\\", \\\"else:\\\", \\\"\\\\t${3:pass}\\\"],\\n        \\\"description\\\": \\\"Code snippet for a while loop with else\\\"\\n    },\\n    \\\"for\\\": {\\n        \\\"prefix\\\": \\\"for\\\",\\n        \\\"body\\\": [\\\"for ${1:target_list} in ${2:expression_list}:\\\", \\\"\\\\t${3:pass}\\\"],\\n        \\\"description\\\": \\\"Code snippet for a for loop\\\"\\n    },\\n    \\\"for/else\\\": {\\n        \\\"prefix\\\": \\\"for/else\\\",\\n        \\\"body\\\": [\\\"for ${1:target_list} in ${2:expression_list}:\\\", \\\"\\\\t${3:pass}\\\", \\\"else:\\\", \\\"\\\\t${4:pass}\\\"],\\n        \\\"description\\\": \\\"Code snippet for a for loop with else\\\"\\n    },\\n    \\\"try/except\\\": {\\n        \\\"prefix\\\": \\\"try/except\\\",\\n        \\\"body\\\": [\\\"try:\\\", \\\"\\\\t${1:pass}\\\", \\\"except ${2:expression} as ${3:identifier}:\\\", \\\"\\\\t${4:pass}\\\"],\\n        \\\"description\\\": \\\"Code snippet for a try/except statement\\\"\\n    },\\n    \\\"try/finally\\\": {\\n        \\\"prefix\\\": \\\"try/finally\\\",\\n        \\\"body\\\": [\\\"try:\\\", \\\"\\\\t${1:pass}\\\", \\\"finally:\\\", \\\"\\\\t${2:pass}\\\"],\\n        \\\"description\\\": \\\"Code snippet for a try/finally statement\\\"\\n    },\\n    \\\"try/except/else\\\": {\\n        \\\"prefix\\\": \\\"try/except/else\\\",\\n        \\\"body\\\": [\\n            \\\"try:\\\",\\n            \\\"\\\\t${1:pass}\\\",\\n            \\\"except ${2:expression} as ${3:identifier}:\\\",\\n            \\\"\\\\t${4:pass}\\\",\\n            \\\"else:\\\",\\n            \\\"\\\\t${5:pass}\\\"\\n        ],\\n        \\\"description\\\": \\\"Code snippet for a try/except/else statement\\\"\\n    },\\n    \\\"try/except/finally\\\": {\\n        \\\"prefix\\\": \\\"try/except/finally\\\",\\n        \\\"body\\\": [\\n            \\\"try:\\\",\\n            \\\"\\\\t${1:pass}\\\",\\n            \\\"except ${2:expression} as ${3:identifier}:\\\",\\n            \\\"\\\\t${4:pass}\\\",\\n            \\\"finally:\\\",\\n            \\\"\\\\t${5:pass}\\\"\\n        ],\\n        \\\"description\\\": \\\"Code snippet for a try/except/finally statement\\\"\\n    },\\n    \\\"try/except/else/finally\\\": {\\n        \\\"prefix\\\": \\\"try/except/else/finally\\\",\\n        \\\"body\\\": [\\n            \\\"try:\\\",\\n            \\\"\\\\t${1:pass}\\\",\\n            \\\"except ${2:expression} as ${3:identifier}:\\\",\\n            \\\"\\\\t${4:pass}\\\",\\n            \\\"else:\\\",\\n            \\\"\\\\t${5:pass}\\\",\\n            \\\"finally:\\\",\\n            \\\"\\\\t${6:pass}\\\"\\n        ],\\n        \\\"description\\\": \\\"Code snippet for a try/except/else/finally statement\\\"\\n    },\\n    \\\"with\\\": {\\n        \\\"prefix\\\": \\\"with\\\",\\n        \\\"body\\\": [\\\"with ${1:expression} as ${2:target}:\\\", \\\"\\\\t${3:pass}\\\"],\\n        \\\"description\\\": \\\"Code snippet for a with statement\\\"\\n    },\\n    \\\"def\\\": {\\n        \\\"prefix\\\": \\\"def\\\",\\n        \\\"body\\\": [\\\"def ${1:funcname}(${2:parameter_list}):\\\", \\\"\\\\t\\\\\\\"\\\\\\\"\\\\\\\"\\\", \\\"\\\\t${3:docstring}\\\", \\\"\\\\t\\\\\\\"\\\\\\\"\\\\\\\"\\\",\\\"\\\\t${4:pass}\\\"],\\n        \\\"description\\\": \\\"Code snippet for a function definition\\\"\\n    },\\n    \\\"def(class method)\\\": {\\n        \\\"prefix\\\": \\\"def(class method)\\\",\\n        \\\"body\\\": [\\\"def ${1:funcname}(self, ${2:parameter_list}):\\\", \\\"\\\\t\\\\\\\"\\\\\\\"\\\\\\\"\\\", \\\"\\\\t${3:docstring}\\\", \\\"\\\\t\\\\\\\"\\\\\\\"\\\\\\\"\\\", \\\"\\\\t${4:pass}\\\"],\\n        \\\"description\\\": \\\"Code snippet for a class method\\\"\\n    },\\n    \\\"def(static class method)\\\": {\\n        \\\"prefix\\\": \\\"def(static class method)\\\",\\n        \\\"body\\\": [\\\"@staticmethod\\\", \\\"def ${1:funcname}(${2:parameter_list}):\\\", \\\"\\\\t\\\\\\\"\\\\\\\"\\\\\\\"\\\", \\\"\\\\t${3:docstring}\\\", \\\"\\\\t\\\\\\\"\\\\\\\"\\\\\\\"\\\", \\\"\\\\t${4:pass}\\\"],\\n        \\\"description\\\": \\\"Code snippet for a static class method\\\"\\n    },\\n    \\\"def(abstract class method)\\\": {\\n        \\\"prefix\\\": \\\"def(abstract class method)\\\",\\n        \\\"body\\\": [\\\"def ${1:funcname}(self, ${2:parameter_list}):\\\", \\\"\\\\t\\\\\\\"\\\\\\\"\\\\\\\"\\\", \\\"\\\\t${3:docstring}\\\", \\\"\\\\t\\\\\\\"\\\\\\\"\\\\\\\"\\\", \\\"\\\\traise NotImplementedError\\\"],\\n        \\\"description\\\": \\\"Code snippet for an abstract class method\\\"\\n    },\\n    \\\"class\\\": {\\n        \\\"prefix\\\": \\\"class\\\",\\n        \\\"body\\\": [\\\"class ${1:classname}(${2:object}):\\\", \\\"\\\\t\\\\\\\"\\\\\\\"\\\\\\\"\\\", \\\"\\\\t${3:docstring}\\\", \\\"\\\\t\\\\\\\"\\\\\\\"\\\\\\\"\\\", \\\"\\\\t${4:pass}\\\"],\\n        \\\"description\\\": \\\"Code snippet for a class definition\\\"\\n    },\\n    \\\"lambda\\\": {\\n        \\\"prefix\\\": \\\"lambda\\\",\\n        \\\"body\\\": [\\\"lambda ${1:parameter_list}: ${2:expression}\\\"],\\n        \\\"description\\\": \\\"Code snippet for a lambda statement\\\"\\n    },\\n    \\\"if(main)\\\": {\\n        \\\"prefix\\\": \\\"__main__\\\",\\n        \\\"body\\\": [\\\"if __name__ == \\\\\\\"__main__\\\\\\\":\\\", \\\"    ${1:pass}\\\"],\\n        \\\"description\\\": \\\"Code snippet for a `if __name__ == \\\\\\\"__main__\\\\\\\": ...` block\\\"\\n    },\\n    \\\"async/def\\\": {\\n        \\\"prefix\\\": \\\"async/def\\\",\\n        \\\"body\\\": [\\\"async def ${1:funcname}(${2:parameter_list}):\\\", \\\"\\\\t${3:pass}\\\"],\\n        \\\"description\\\": \\\"Code snippet for an async statement\\\"\\n    },\\n    \\\"async/for\\\": {\\n        \\\"prefix\\\": \\\"async/for\\\",\\n        \\\"body\\\": [\\\"async for ${1:target} in ${2:iter}:\\\", \\\"\\\\t${3:block}\\\"],\\n        \\\"description\\\": \\\"Code snippet for an async for statement\\\"\\n    },\\n    \\\"async/for/else\\\": {\\n        \\\"prefix\\\": \\\"async/for/else\\\",\\n        \\\"body\\\": [\\\"async for ${1:target} in ${2:iter}:\\\", \\\"\\\\t${3:block}\\\", \\\"else:\\\", \\\"\\\\t${4:block}\\\"],\\n        \\\"description\\\": \\\"Code snippet for an async for statement with else\\\"\\n    },\\n    \\\"async/with\\\": {\\n        \\\"prefix\\\": \\\"async/with\\\",\\n        \\\"body\\\": [\\\"async with ${1:expr} as ${2:var}:\\\", \\\"\\\\t${3:block}\\\"],\\n        \\\"description\\\": \\\"Code snippet for an async with statement\\\"\\n    }\\n}\"}}","extensions":"[{\"identifier\":{\"id\":\"almenon.arepl\",\"uuid\":\"88eb8072-5ab1-457b-9835-6d92196388a3\"},\"displayName\":\"AREPL for python\"},{\"identifier\":{\"id\":\"charliermarsh.ruff\",\"uuid\":\"c2ca9b43-fa38-44fc-928e-5125970b9c00\"},\"displayName\":\"Ruff\",\"preRelease\":true},{\"identifier\":{\"id\":\"donjayamanne.python-environment-manager\",\"uuid\":\"0c9f60fd-5588-42f7-9176-e80c3ae111ec\"},\"displayName\":\"Python Environment Manager\"},{\"identifier\":{\"id\":\"esbenp.prettier-vscode\",\"uuid\":\"96fa4707-6983-4489-b7c5-d5ffdfdcce90\"},\"displayName\":\"Prettier - Code formatter\"},{\"identifier\":{\"id\":\"frhtylcn.pythonsnippets\",\"uuid\":\"0ad8c94b-76b2-4033-b703-18596182bfcc\"},\"displayName\":\"python snippets\"},{\"identifier\":{\"id\":\"kevinrose.vsc-python-indent\",\"uuid\":\"f3cbfb84-b1e1-40ff-b70f-877253461260\"},\"displayName\":\"Python Indent\"},{\"identifier\":{\"id\":\"ms-python.autopep8\",\"uuid\":\"5a21b0c3-89ca-46dd-8ada-658518fb94a5\"},\"displayName\":\"autopep8\"},{\"identifier\":{\"id\":\"ms-python.black-formatter\",\"uuid\":\"859e640c-c157-47da-8699-9080b81c8371\"},\"displayName\":\"Black Formatter\",\"preRelease\":true},{\"identifier\":{\"id\":\"ms-python.isort\",\"uuid\":\"4ad0ce32-ff3f-49f0-83b5-93e5dc00cfff\"},\"displayName\":\"isort\"},{\"identifier\":{\"id\":\"ms-python.python\",\"uuid\":\"f1f59ae4-9318-4f3c-a9b5-81b2eaa5f8a5\"},\"displayName\":\"Python\",\"preRelease\":true},{\"identifier\":{\"id\":\"ms-python.vscode-pylance\",\"uuid\":\"364d2426-116a-433a-a5d8-a5098dc3afbd\"},\"displayName\":\"Pylance\",\"preRelease\":true},{\"identifier\":{\"id\":\"njpwerner.autodocstring\",\"uuid\":\"2d6fea35-f68e-461d-9b7b-5cd05be99451\"},\"displayName\":\"autoDocstring - Python Docstring Generator\"},{\"identifier\":{\"id\":\"njqdev.vscode-python-typehint\",\"uuid\":\"a7b7591e-f2b8-48f7-b8ea-6d62a0dd38c8\"},\"displayName\":\"Python Type Hint\"},{\"identifier\":{\"id\":\"tushortz.python-extended-snippets\",\"uuid\":\"8842cbf6-738b-423f-81a4-ae88fba2024c\"},\"displayName\":\"Python Extended\"}]"}